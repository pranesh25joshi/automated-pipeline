name: Multi-Environment CI/CD Pipeline

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

# Add permissions needed for GitHub Container Registry
permissions:
  contents: read
  packages: write

env:
  # Update these with your values
  REGISTRY: docker.io
  IMAGE_NAME: pranesh25joshi/automated-pipeline
  PROJECT_NAME: express-backend

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image-tag.outputs.image }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

      - name: Set Image Tag
        id: image-tag
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.image-tag.outputs.image }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy-dev:
    name: Deploy to Dev
    needs: build
    if: github.ref == format(''refs/heads/{0}'', ''develop'')
    runs-on: ubuntu-latest
    environment:
      name: development
      url: ${{ steps.get-url.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create kubeconfig file
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config view --minify

      - name: Deploy to Dev
        id: deploy
        run: |
          # Apply Kubernetes resources
          kubectl apply -f k8s/dev/configmap.yaml -n dev
          kubectl apply -f k8s/dev/service.yaml -n dev
          kubectl apply -f k8s/dev/deployment.yaml -n dev
          
          # Update the deployment with the new image
          kubectl set image deployment/express-backend express-backend=${{ needs.build.outputs.image }} -n dev

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_IP=$(kubectl get svc express-backend -n dev -o jsonpath="{.status.loadBalancer.ingress[0].ip}" || echo "pending")
          echo "url=http://$SERVICE_IP:3000" >> $GITHUB_OUTPUT
          
      - name: Verify Deployment
        run: |
          kubectl get all -n dev
          echo "Deployment to Dev environment successful!"

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: github.ref == format(''refs/heads/{0}'', ''main'')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.get-url.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create kubeconfig file
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config view --minify

      - name: Deploy to Staging
        id: deploy
        run: |
          # Apply Kubernetes resources
          kubectl apply -f k8s/staging/configmap.yaml -n staging
          kubectl apply -f k8s/staging/service.yaml -n staging
          kubectl apply -f k8s/staging/deployment.yaml -n staging
          
          # Update the deployment with the new image
          kubectl set image deployment/express-backend express-backend=${{ needs.build.outputs.image }} -n staging

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_IP=$(kubectl get svc express-backend -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}" || echo "pending")
          echo "url=http://$SERVICE_IP:3000" >> $GITHUB_OUTPUT
          
      - name: Verify Deployment
        run: |
          kubectl get all -n staging
          echo "Deployment to Staging environment successful!"

  deploy-prod:
    name: Deploy to Production
    needs: [build, deploy-staging]
    if: github.ref == format(''refs/heads/{0}'', ''main'')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.get-url.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create kubeconfig file
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          kubectl config view --minify

      - name: Deploy to Production
        id: deploy
        run: |
          # Apply Kubernetes resources
          kubectl apply -f k8s/prod/configmap.yaml -n prod
          kubectl apply -f k8s/prod/service.yaml -n prod
          kubectl apply -f k8s/prod/deployment.yaml -n prod
          
          # Update the deployment with the new image
          kubectl set image deployment/express-backend express-backend=${{ needs.build.outputs.image }} -n prod

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_IP=$(kubectl get svc express-backend -n prod -o jsonpath="{.status.loadBalancer.ingress[0].ip}" || echo "pending")
          echo "url=http://$SERVICE_IP:3000" >> $GITHUB_OUTPUT
          
      - name: Verify Deployment
        run: |
          kubectl get all -n prod
          echo "Deployment to Production environment successful!"
